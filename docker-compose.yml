version: "3.8"

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - ${ZOOKEEPER_VOLUME}
    networks:
      - api.network

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS} # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME} # docker-machine ip
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LOG_DIRS: ${KAFKA_LOG_DIRS}
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${KAFKA_VOLUME}
    depends_on:
      - "zookeeper"
    networks:
      - api.network

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - "3306:3306"
    expose:
      # Opens port 3306 on the container
      - "3306"
    networks:
      - api.network
    # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
    
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - "receiver"
      - "storage"
      - "processor"
      - "audit"
      - "dashboard"
    networks:
      - api.network

  receiver:
    image: nazzywazzy/receiver:receiverapp
    # build:
    #   context: ./receiver
    #   dockerfile: Dockerfile
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/logs:/logs
      - /home/azureuser/config/receiver:/config
    ports:
      - "8080"
    networks:
      - api.network
    # expose:
    #   - "8080"
    depends_on:
      - "kafka"

  storage:
    image: nazzywazzy/storage:storageapp
    # build:
    #   context: ./storage
    #   dockerfile: Dockerfile
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/logs:/logs
      - /home/azureuser/config/storage:/config
    ports:
      - "8090"
    networks:
      - api.network
    # expose:
    #   - "8090"
    depends_on:
      - "db"
      - "kafka"

  processor:
    image: nazzywazzy/processor:processorapp
    # build:
    #   context: ./processor
    #   dockerfile: Dockerfile
    environment:
      - TARGET_ENV=test
    volumes:
      - processor-data:/data
      - /home/azureuser/logs:/logs
      - /home/azureuser/config/processor:/config
    ports:
      - "8100"
    networks:
      - api.network
    depends_on:
      - "storage"

  audit:
    image: nazzywazzy/audit:auditapp
    # build:
    #   context: ./audit
    #   dockerfile: Dockerfile
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/logs:/logs
      - /home/azureuser/config/audit_log:/config
    ports:
      - "8110"
    networks:
      - api.network
    # expose:
    #   - "8110"
    depends_on:
      - "kafka"

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "3000"
    networks:
      - api.network
    # expose:
    #   - "3000"
    depends_on:
      - "processor"
      - "audit"

networks:
  api.network:

# Names our volume
volumes:
  my-db:
  processor-data:
  kafka-data:
  zookeeper-data:
